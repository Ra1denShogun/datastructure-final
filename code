from typing import List
from collections import namedtuple
import time


class Point(namedtuple("Point", "x y")):  #定义Point（），具有x，y两个特征，可看做是二维坐标系上的点
    def __repr__(self) -> str:
        return f'Point{tuple(self)!r}'


class Rectangle(namedtuple("Rectangle", "lower upper")):  # 定义“矩形”类，参数为lower、upper，分别代表左下角和右上角的点
    def __repr__(self) -> str:
        return f'Rectangle{tuple(self)!r}'

    def is_contains(self, p: Point) -> bool:  # 函数通过令点p的xy坐标分别和矩形的lower点和upper点的xy坐标对比，来判断点p是否在矩形内
        return self.lower.x <= p.x <= self.upper.x and self.lower.y <= p.y <= self.upper.y


class Node(namedtuple("Node", "location left right")):
    # 定义Node，三个参数分别为location、left、right，分别代表点坐标、左节点、右节点
    """
    location: Point
    left: Node
    right: Node
    """

    def __repr__(self):
        return f'{tuple(self)!r}'


class KDTree:
    # 定义KD树类
    """k-d tree"""

    def __init__(self):
        self._root = None  # 根节点初始为None
        self._n = 0  # 维数初始值为0
        self._dic = {}#空字典 为第五题专门准备 没有用于其他题目 仅用于第五题反向存储split

    def insert(self, p: List[Point]):
        
        """insert a list of points"""

        def rec_insert(data_set: List[Point], depth: int):# 递归插入函数
            if not data_set:#当输入值为空列表的情况
                return None
            LEN = len(data_set)
            self._n = len(data_set[0])
            split = 0
            max_var = 0 #设初始方差记录值
            for i in range(self._n): #通过循环来比较x和y的方差大小
                sum1 = 0
                sum2 = 0
                items = []
                for t in data_set:
                    items.append(t[i])
                    sum1 += float(t[i])
                    sum2 += float(t[i])**2
                mean = sum1 / LEN
                #  方差公式 D（X） = E（x^2） - (E（x）)^2  
                var = sum2 / LEN - mean**2
                if var > max_var:
                    max_var = var
                    split = i    #循环结束得到split值
            data_set.sort(key=lambda x: x[split])
            mid = len(data_set) // 2  # 取中位数的下标，就是需要切分出来的位置
            median_point = data_set[mid]  # 切分点位置
            add = {data_set[mid]: split}
            self._dic.update(add)
            left_data_set = data_set[:mid]  # 左子树坐标列表
            right_data_set = data_set[mid+1:LEN]  # 右子树坐标列表
            return Node(data_set[mid], rec_insert(left_data_set, depth + 1), rec_insert(right_data_set, depth + 1))  # 递归

        self._root = rec_insert(p, self._n)

    def range(self, rectangle: Rectangle) -> List[Point]:
        """range query"""
        result = []  # 最终函数将以列表形式输出

        def recursion(dim: int, node: Node, rec: Rectangle):  # 递归范围搜索函数
            if not node:
                return None
            axis = dim % 2  # 确定用于切分的坐标轴
            if axis == 0:  # 以x为切分轴
                if node.location.x < rec.lower.x:  # 如果x坐标小于范围，则搜索右子树
                    recursion(dim + 1, node.right, rec)
                elif node.location.x > rec.upper.x:  # 如果x坐标大于范围，则搜索左子树
                    recursion(dim + 1, node.left, rec)
                else:  # x坐标在范围内，则搜索左右子树
                    recursion(dim + 1, node.right, rec)
                    recursion(dim + 1, node.left, rec)
                    if rec.is_contains(node.location):  # 判断节点的位置是否在矩形范围内
                        result.append(node.location)
                        
            else:  # 以y为切分轴
                if node.location.y < rec.lower.y:  # y坐标小于范围，则搜索右子树
                    recursion(dim + 1, node.right, rec)
                elif node.location.y > rec.upper.y:  # y坐标大于范围，则搜索右子树
                    recursion(dim + 1, node.left, rec)
                else:  # y坐标在范围内，则搜索左右子树
                    recursion(dim + 1, node.right, rec)
                    recursion(dim + 1, node.left, rec)
                    if rec.is_contains(node.location):  # 判断节点的位置是否在矩形范围内
                    #如果存在则加入列表中
                        result.append(node.location)

        recursion(self._n, self._root, rectangle)  # 递归
        return result


def range_test():
    points = [Point(7, 2), Point(5, 4), Point(9, 6), Point(4, 7), Point(8, 1), Point(2, 3)]
    kd = KDTree()
    kd.insert(points)
    result = kd.range(Rectangle(Point(0, 0), Point(6, 6)))
    assert sorted(result) == sorted([Point(2, 3), Point(5, 4)])


def performance_test():
    points = [Point(x, y) for x in range(1000) for y in range(1000)]

    lower = Point(500, 500)
    upper = Point(504, 504)
    rectangle = Rectangle(lower, upper)
    #  naive method
    start = int(round(time.time() * 1000))
    result1 = [p for p in points if rectangle.is_contains(p)]
    end = int(round(time.time() * 1000))
    print(f'Naive method: {end - start}ms')

    kd = KDTree()
    kd.insert(points)
    # k-d tree
    start = int(round(time.time() * 1000))
    result2 = kd.range(rectangle)
    end = int(round(time.time() * 1000))
    print(f'K-D tree: {end - start}ms')

    assert sorted(result1) == sorted(result2)


if __name__ == '__main__':
    range_test()
    performance_test()
   


#bonus————————————————————————————————————————————————————————————————————————————————————————
def NearestN(kd:KDTree, query:Point):
    NN = kd._root.location
    min_dist = computeDist(query,NN)
    nodeList = []
    temp_root = kd._root
#二分
    while temp_root:
        nodeList.append(temp_root)
        dist = computeDist(query,temp_root.location)
        if min_dist > dist:
            NN = temp_root.location
            min_dist = dist

        # 当前节点的划分域
        splt = kd._dic[temp_root.location]
        if query[splt] <= temp_root.location[splt]:
            temp_root = temp_root.left
        else:
            temp_root = temp_root.right

        # 回溯    
        while nodeList:
            #list模拟栈，后进先出   
            back_location = nodeList.pop()
            splt = kd._dic[back_location.location]
            print("back.location = ", back_location.location)
            ## 判断是否需要进入父亲节点的子空间进行搜索 
            if abs(query[splt] - back_location.location[splt]) < min_dist:
                if(query[splt] <= back_location.location[splt]):
                    temp_root = back_location.right
                else:
                    temp_root = back_location.left

            if temp_root:
                nodeList.append(temp_root)
                curDist = computeDist(query,temp_root.location)
                if min_dist > curDist:
                    min_dist = curDist
                    NN = temp_root.location
    return NN, min_dist
import math
def computeDist(p_1:Point,p_2:Point):
    '''
    计算两个数据点的距离
    return：pt1和pt2之间的距离
    '''
    sum = 0.0
    for i in range(len(p_1)):
        sum = sum + (p_1[i]-p_2[i]) * (p_1[i]-p_2[i])
    return math.sqrt(sum)
    
#最终测试
points = [Point(7, 2), Point(5, 4), Point(9, 6), Point(4, 7), Point(8, 1), Point(2, 3)]
kd = KDTree()
kd.insert(points)
NearestN(kd,Point(4,4))
